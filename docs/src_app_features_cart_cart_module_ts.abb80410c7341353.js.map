{"version":3,"file":"src_app_features_cart_cart_module_ts.abb80410c7341353.js","mappings":"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","names":["CartGuard","constructor","cartService","authService","router","alert","this","canDeactivate","component","currentRoute","currentState","nextState","url","includes","getCartProducts","length","createBooleanConfirmDialog","checkLogin","fromUrl","isLoggedIn","hasProducts","createWarningDialog","navigate","queryParams","from","canActivate","route","state","hasCheckedOut","core","factory","i0","OrderLineComponent","ngOnInit","steps","getSteps","selectors","CartComponent","setAtCart","routes","path","children","pathMatch","redirectTo","loadChildren","__webpack_require__","then","m","ResumeModule","title","CheckoutModule","ConfirmationModule","CartRoutingModule","RouterModule","CartModule","SharedModule","DiscountFieldComponent","fb","EventEmitter","discountForm","group","coupon","validateCoupon","COUPONS","coup","name","applyCoupon","getRawValue","discountPercentage","controls","setErrors","invalidCoupon","onDiscountPercentage","emit","valid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","ProductTileComponent","productService","getProducts","products","maxQuantity","find","prod","id","product","stock","quantity","getPrice","price","changeQuantity","newQuantity","action","addProductToCart","removeProductFromCart","onChangeQuantity","removeProduct","onRemoveProduct","_angular_core__WEBPACK_IMPORTED_MODULE_2__","QuantityChangerComponent","onQuantityChange","ctx"],"sourceRoot":"webpack:///","sources":["./src/app/core/guards/cart/cart.guard.ts","./src/app/features/cart/components/order-line/order-line.component.html","./src/app/features/cart/components/order-line/order-line.component.ts","./src/app/features/cart/cart.component.ts","./src/app/features/cart/cart.component.html","./src/app/features/cart/cart-routing.module.ts","./src/app/features/cart/cart.module.ts","./src/app/features/cart/components/discount-field/discount-field.component.html","./src/app/features/cart/components/discount-field/discount-field.component.ts","./src/app/features/cart/components/product-tile/product-tile.component.html","./src/app/features/cart/components/product-tile/product-tile.component.ts","./src/app/features/cart/components/quantity-changer/quantity-changer.component.ts","./src/app/features/cart/components/quantity-changer/quantity-changer.component.html"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  CanDeactivate,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { CartComponent } from 'src/app/features/cart/cart.component';\nimport { AlertService, AuthService, CartService } from '../../services';\nimport { RouteGuard } from '../../types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartGuard implements CanActivate, CanDeactivate<CartComponent> {\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private router: Router,\n    private alert: AlertService\n  ) {}\n\n  canDeactivate(\n    component: CartComponent,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState: RouterStateSnapshot\n  ): RouteGuard {\n    if (nextState.url.includes('/cart') || nextState.url.includes('/login')) {\n      return true;\n    }\n    if (this.cartService.getCartProducts().length > 0) {\n      return this.alert.createBooleanConfirmDialog(\n        'Are you sure you want to leave your cart?',\n        ''\n      );\n    }\n\n    return true;\n  }\n\n  private checkLogin(fromUrl: string): boolean {\n    if (this.authService.isLoggedIn()) {\n      const hasProducts = this.cartService.getCartProducts().length > 0;\n      if (!hasProducts) {\n        this.alert.createWarningDialog(\n          \"You don't have products in your cart\",\n          'Add some items first'\n        );\n        this.router.navigate(['/']);\n      }\n      return hasProducts;\n    }\n\n    this.router.navigate(['/login'], { queryParams: { from: fromUrl } });\n    return false;\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): RouteGuard {\n    if (!state.url.includes('confirmation')) {\n      return this.checkLogin(state.url);\n    }\n\n    if (!this.cartService.hasCheckedOut()) {\n      this.router.navigate(['/cart']);\n      return false;\n    }\n\n    return this.checkLogin(state.url);\n  }\n}\n","<div class=\"order-line\">\n  <ng-container *ngFor=\"let step of steps\">\n    <div class=\"step-column\">\n      <div\n        class=\"step\"\n        [class.completed]=\"step.completed\"\n        [class.current]=\"step.current\"\n      >\n        <span>{{ step.step.toString() }}</span>\n      </div>\n      <span> {{ step.title }} </span>\n    </div>\n  </ng-container>\n</div>\n","import { Component } from '@angular/core';\nimport { CartService } from 'src/app/core/services';\nimport { IOrderStep } from '../../models';\n\n@Component({\n  selector: 'order-line',\n  templateUrl: './order-line.component.html',\n  styleUrls: ['./order-line.component.scss'],\n})\nexport class OrderLineComponent {\n  steps: IOrderStep[] = [];\n\n  constructor(private cartService: CartService) {}\n\n  ngOnInit() {\n    this.steps = this.cartService.getSteps();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CartService } from 'src/app/core/services';\n\n@Component({\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.scss'],\n})\nexport class CartComponent {\n  constructor(private cartService: CartService, private router: Router) {}\n\n  ngOnInit() {\n    this.cartService.setAtCart(this.router.url);\n  }\n}\n","<order-line></order-line>\n<div class=\"cart-container\">\n  <router-outlet></router-outlet>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CartGuard } from 'src/app/core/guards';\nimport { CartComponent } from './cart.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CartComponent,\n    canDeactivate: [CartGuard],\n    children: [\n      { path: '', pathMatch: 'full', redirectTo: 'resume' },\n      {\n        path: 'resume',\n        loadChildren: () =>\n          import('./pages/resume/resume.module').then((m) => m.ResumeModule),\n        title: 'Cart Resume | BC Store',\n      },\n      {\n        path: 'checkout',\n        loadChildren: () =>\n          import('./pages/checkout/checkout.module').then(\n            (m) => m.CheckoutModule\n          ),\n        title: 'Cart Checkout | BC Store',\n        canActivate: [CartGuard],\n      },\n      {\n        path: 'confirmation',\n        loadChildren: () =>\n          import('./pages/confirmation/confirmation.module').then(\n            (m) => m.ConfirmationModule\n          ),\n        title: 'Order Confirmation | BC Store',\n        canActivate: [CartGuard],\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CartRoutingModule {}\n","import { NgModule } from '@angular/core';\n\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { CartRoutingModule } from './cart-routing.module';\n\nimport { CartComponent } from './cart.component';\nimport * as components from './components';\n\n@NgModule({\n  declarations: [CartComponent, ...components.cartComponents],\n  imports: [SharedModule, CartRoutingModule],\n  exports: [...components.cartComponents],\n})\nexport class CartModule {}\n","<form [formGroup]=\"discountForm\" role=\"form\">\n  <div class=\"discount-container\">\n    <div class=\"coupon-field\">\n      <mat-form-field>\n        <mat-label>DISCOUNT COUPON</mat-label>\n        <input\n          matInput\n          placeholder=\"Enter your coupon\"\n          formControlName=\"coupon\"\n        />\n        <button\n          *ngIf=\"discountForm.valid && discountForm.get('coupon')?.value !== ''\"\n          matSuffix\n          mat-icon-button\n          (click)=\"applyCoupon()\"\n        >\n          <mat-icon>check</mat-icon>\n        </button>\n        <mat-error\n          *ngIf=\"discountForm.controls['coupon'].hasError('invalidCoupon')\"\n        >\n          Invalid Coupon\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </div>\n</form>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { COUPONS } from 'src/app/shared/constants';\n\n@Component({\n  selector: 'discount-field',\n  templateUrl: './discount-field.component.html',\n  styleUrls: ['./discount-field.component.scss'],\n})\nexport class DiscountFieldComponent {\n  discountForm!: FormGroup;\n\n  @Output() onDiscountPercentage: EventEmitter<number> =\n    new EventEmitter<number>();\n\n  discountPercentage: number = 0;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.discountForm = this.fb.group({\n      coupon: '',\n    });\n  }\n\n  validateCoupon(coupon: string) {\n    if (coupon === '') {\n      return true;\n    }\n\n    return COUPONS.map((coup) => coup.name).includes(coupon);\n  }\n\n  applyCoupon() {\n    const formValue = this.discountForm.getRawValue();\n    const coupon: string = formValue['coupon'];\n\n    if (this.validateCoupon(coupon)) {\n      this.discountPercentage =\n        COUPONS.find((coup) => coup.name === coupon)?.discountPercentage ?? 0;\n    } else {\n      this.discountForm.controls['coupon'].setErrors({\n        invalidCoupon: true,\n      });\n    }\n\n    if (this.discountForm.valid) {\n      this.onDiscountPercentage.emit(this.discountPercentage);\n    } else {\n      this.onDiscountPercentage.emit(0);\n    }\n  }\n}\n","<div class=\"product-card mat-elevation-z3\">\n  <div class=\"left\">\n    <span class=\"product-position\">{{ position }}</span>\n    <img [src]=\"product.image\" loading=\"lazy\" />\n    <span class=\"product-name\">\n      {{ product.title }}\n    </span>\n  </div>\n  <div *ngIf=\"hasActions\" class=\"right\">\n    <span class=\"price\"> ${{ getPrice() }} </span>\n    <quantity-changer\n      [quantity]=\"product.quantity\"\n      [maxQuantity]=\"maxQuantity\"\n      (onQuantityChange)=\"changeQuantity($event.quantity, $event.action)\"\n    ></quantity-changer>\n    <button class=\"delete\" mat-icon-button (click)=\"removeProduct()\">\n      <mat-icon>delete</mat-icon>\n    </button>\n  </div>\n  <div *ngIf=\"!hasActions\" class=\"right\">\n    <span class=\"price\"> {{ getPrice() | currency : \"USD\" : \"symbol\" }} </span>\n    <span class=\"quantity\">Quantity: {{ product.quantity }}</span>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CartService, ProductsService } from 'src/app/core/services';\nimport { ICartProduct, IProduct } from 'src/app/shared/models';\n\n@Component({\n  selector: 'product-tile',\n  templateUrl: './product-tile.component.html',\n  styleUrls: ['./product-tile.component.scss'],\n})\nexport class ProductTileComponent {\n  @Input() product!: ICartProduct;\n  @Input() position: number = 0;\n  @Input() quantity: number = 0;\n  @Input() hasActions: boolean = true;\n\n  @Output() onChangeQuantity: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onRemoveProduct: EventEmitter<any> = new EventEmitter<any>();\n\n  maxQuantity: number = 0;\n\n  constructor(\n    private cartService: CartService,\n    private productService: ProductsService\n  ) {}\n\n  ngOnInit() {\n    this.productService.getProducts().then((products) => {\n      this.maxQuantity =\n        (products.find((prod) => prod.id === this.product.id)?.stock ?? 0) +\n        this.quantity;\n    });\n  }\n\n  getPrice(): number {\n    return this.product.price * this.quantity;\n  }\n\n  changeQuantity(newQuantity: number, action: string) {\n    if (action === 'add') {\n      this.cartService.addProductToCart(this.product);\n    } else {\n      this.cartService.removeProductFromCart(this.product.id);\n    }\n\n    this.quantity = newQuantity;\n    this.onChangeQuantity.emit('');\n  }\n\n  removeProduct() {\n    this.cartService.removeProductFromCart(\n      this.product.id,\n      this.quantity === 0 ? 1 : this.quantity\n    );\n    this.onRemoveProduct.emit('');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { AlertService } from 'src/app/core/services';\n\ninterface IOnQttChange {\n  quantity: number;\n  action: string;\n}\n\n@Component({\n  selector: 'quantity-changer',\n  templateUrl: './quantity-changer.component.html',\n  styleUrls: ['./quantity-changer.component.scss'],\n})\nexport class QuantityChangerComponent {\n  @Input() quantity: number = 0;\n  @Input() maxQuantity: number = 0;\n  @Output() onQuantityChange: EventEmitter<IOnQttChange> =\n    new EventEmitter<IOnQttChange>();\n\n  constructor(private alert: AlertService) {}\n\n  changeQuantity(action: string) {\n    if (this.quantity === this.maxQuantity && action === 'add') {\n      this.alert.createWarningDialog(\n        \"Can't add more\",\n        `Only ${this.maxQuantity} left!`\n      );\n      return;\n    }\n\n    this.quantity = action === 'add' ? this.quantity + 1 : this.quantity - 1;\n\n    this.onQuantityChange.emit({ quantity: this.quantity, action });\n  }\n}\n","<div class=\"container\">\n  <button mat-icon-button (click)=\"changeQuantity('remove')\">\n    <mat-icon>remove</mat-icon>\n  </button>\n  <span class=\"quantity\">{{ quantity }}</span>\n  <button mat-icon-button (click)=\"changeQuantity('add')\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n"],"x_google_ignoreList":[]}