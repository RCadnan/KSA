{"version":3,"file":"src_app_features_account_account_module_ts.cc93dcffdc24a95e.js","mappings":"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","names":["AccountComponent","constructor","cartService","router","this","ngOnInit","setAtCart","url","core","selectors","i0","routes","path","component","children","pathMatch","redirectTo","loadChildren","Promise","then","m","AdminModule","title","canActivate","AuthGuard","UserAreaModule","AccountRoutingModule","RouterModule","AccountModule","SharedModule","AddressDialogComponent","utils","fb","dialogRef","addressData","stateOpts","Object","keys","States","map","st","uf","name","addressForm","group","zipCode","Validators","street","complement","neighborhood","city","state","getAddressFromZipCode","trim","_this","get","setErrors","required","replace","address","getDataFromZipCode","fillAddress","invalidZipCode","addressGroupControl","controls","setValue","cidade","estado","bairro","logradouro","apply","close","getRawValue","_angular_core__WEBPACK_IMPORTED_MODULE_2__","MAT_DIALOG_DATA","ctx","value","AddressTileComponent","dialog","EventEmitter","formValue","openAddressDialog","open","width","data","afterClosed","subscribe","result","onEditAddress","emit","postalCode","_angular_core__WEBPACK_IMPORTED_MODULE_1__","ProductDialogComponent","productsService","id","getCategories","categories","category","captalizeFirstLetter","productForm","brand","description","price","stock","images","initProductForm","product","getProductById","toString","formControls","convertFormValueToProduct","_this2","getProducts","length","discountPercentage","rating","thumbnail","_this3"],"sourceRoot":"webpack:///","sources":["./src/app/features/account/account.component.ts","./src/app/features/account/account.component.html","./src/app/features/account/account-routing.module.ts","./src/app/features/account/account.module.ts","./src/app/features/account/components/address-dialog/address-dialog.component.html","./src/app/features/account/components/address-dialog/address-dialog.component.ts","./src/app/features/account/components/address-tile/address-tile.component.ts","./src/app/features/account/components/address-tile/address-tile.component.html","./src/app/features/account/components/product-dialog/product-dialog.component.html","./src/app/features/account/components/product-dialog/product-dialog.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CartService } from 'src/app/core/services';\n\n@Component({\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.scss'],\n})\nexport class AccountComponent {\n  constructor(private cartService: CartService, private router: Router) {}\n\n  ngOnInit() {\n    this.cartService.setAtCart(this.router.url);\n  }\n}\n","<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from 'src/app/core/guards/auth/auth.guard';\nimport { AccountComponent } from './account.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AccountComponent,\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'user',\n      },\n      {\n        path: 'admin',\n        loadChildren: () =>\n          import('./pages/admin/admin.module').then((m) => m.AdminModule),\n        title: 'Admin View | BC Store',\n        canActivate: [AuthGuard],\n      },\n      {\n        path: 'user',\n        loadChildren: () =>\n          import('./pages/user-area/user-area.module').then(\n            (m) => m.UserAreaModule\n          ),\n        title: 'User Area | BC Store',\n        canActivate: [AuthGuard],\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AccountRoutingModule {}\n","import { NgModule } from '@angular/core';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { AccountComponent } from './account.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport * as components from './components';\nimport { NgxMaskDirective, NgxMaskPipe } from 'ngx-mask';\n\n@NgModule({\n  declarations: [AccountComponent, ...components.accountComponents],\n  imports: [SharedModule, AccountRoutingModule, NgxMaskDirective, NgxMaskPipe],\n  exports: [...components.accountComponents, NgxMaskDirective, NgxMaskPipe],\n})\nexport class AccountModule {}\n","<h1 mat-dialog-title>\n  {{ addressData !== null ? \"Edit Address\" : \"New Address\" }}\n</h1>\n<div mat-dialog-content>\n  <form [formGroup]=\"addressForm\" role=\"form\">\n    <div class=\"row\">\n      <mat-form-field id=\"zipCode-field\">\n        <mat-label>ZIP Code</mat-label>\n        <input\n          cdkFocusInitial\n          type=\"text\"\n          matInput\n          formControlName=\"zipCode\"\n          placeholder=\"Enter your ZIP Code\"\n          mask=\"00000-000\"\n        />\n        <button\n          matSuffix\n          mat-icon-button\n          type=\"button\"\n          (click)=\"getAddressFromZipCode(addressForm.get('zipCode')!.value)\"\n        >\n          <mat-icon> search </mat-icon>\n        </button>\n        <mat-error *ngIf=\"addressForm.get('zipCode')!.hasError('required')\">\n          ZIP Code is <strong>required</strong>\n        </mat-error>\n        <mat-error\n          *ngIf=\"addressForm.get('zipCode')!.hasError('invalidZipCode')\"\n        >\n          Please enter a valid ZIP Code\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field id=\"state-field\">\n        <mat-label>State</mat-label>\n        <mat-select formControlName=\"state\">\n          <mat-option *ngFor=\"let opt of stateOpts\" [value]=\"opt.uf\">\n            {{ opt.name }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"addressForm.get('state')!.hasError('required')\">\n          State is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n    </div>\n\n    <div class=\"row\">\n      <mat-form-field id=\"street-field\">\n        <mat-label>Street</mat-label>\n        <input\n          type=\"text\"\n          matInput\n          formControlName=\"street\"\n          placeholder=\"Enter your street\"\n        />\n        <mat-error *ngIf=\"addressForm.get('street')!.hasError('required')\">\n          Street is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field id=\"complement-field\">\n        <mat-label>Complement</mat-label>\n        <input\n          type=\"text\"\n          matInput\n          formControlName=\"complement\"\n          placeholder=\"Enter your complement\"\n        />\n      </mat-form-field>\n    </div>\n\n    <div class=\"row\">\n      <mat-form-field id=\"city-field\">\n        <mat-label>City</mat-label>\n        <input\n          type=\"text\"\n          matInput\n          formControlName=\"city\"\n          placeholder=\"Enter your city\"\n        />\n        <mat-error *ngIf=\"addressForm.get('city')!.hasError('required')\">\n          City name is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field id=\"neighborhood-field\">\n        <mat-label>Neighborhood</mat-label>\n        <input\n          type=\"text\"\n          matInput\n          formControlName=\"neighborhood\"\n          placeholder=\"Enter your neighborhood\"\n        />\n        <mat-error\n          *ngIf=\"addressForm.get('neighborhood')!.hasError('required')\"\n        >\n          Neighborhood is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n    </div>\n  </form>\n</div>\n<div mat-dialog-actions align=\"end\">\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n  <button\n    mat-stroked-button\n    color=\"primary\"\n    (click)=\"apply()\"\n    [disabled]=\"addressForm.invalid || !addressForm.dirty\"\n  >\n    {{ addressData !== null ? \"Edit\" : \"Add\" }}\n  </button>\n</div>\n","import { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { UtilsService } from 'src/app/core/services';\nimport { States } from 'src/app/shared/constants';\nimport { IPostmonApiResponse, IState } from 'src/app/shared/models';\n\n@Component({\n  templateUrl: './address-dialog.component.html',\n  styleUrls: ['./address-dialog.component.scss'],\n})\nexport class AddressDialogComponent {\n  addressForm!: FormGroup;\n  stateOpts: IState[] = [];\n\n  constructor(\n    private utils: UtilsService,\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<AddressDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public addressData?: FormGroup\n  ) {}\n\n  ngOnInit() {\n    this.stateOpts = Object.keys(States).map((st) => ({\n      uf: st,\n      name: States[st].name,\n    }));\n\n    this.addressForm =\n      this.addressData ??\n      this.fb.group({\n        zipCode: ['', [Validators.required]],\n        street: ['', [Validators.required]],\n        complement: [''],\n        neighborhood: ['', [Validators.required]],\n        city: ['', [Validators.required]],\n        state: ['', [Validators.required]],\n      });\n  }\n\n  async getAddressFromZipCode(zipCode: string) {\n    if (zipCode.trim() === '') {\n      this.addressForm.get('zipCode')?.setErrors({\n        required: true,\n      });\n    }\n\n    try {\n      zipCode = zipCode.replace('-', '').trim();\n      const address: IPostmonApiResponse = await this.utils.getDataFromZipCode(\n        zipCode\n      );\n      this.fillAddress(address);\n    } catch (err) {\n      this.addressForm.get('zipCode')?.setErrors({\n        invalidZipCode: true,\n      });\n    }\n  }\n\n  private fillAddress(address: IPostmonApiResponse) {\n    const addressGroupControl = this.addressForm.controls;\n\n    addressGroupControl['city']?.setValue(address.cidade);\n    addressGroupControl['state']?.setValue(address.estado);\n    addressGroupControl['neighborhood']?.setValue(address.bairro);\n    addressGroupControl['street']?.setValue(address.logradouro);\n  }\n\n  apply() {\n    this.dialogRef.close(this.addressForm.getRawValue());\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { IUserAddress } from 'src/app/shared/models';\nimport { AddressDialogComponent } from '../address-dialog/address-dialog.component';\n\n@Component({\n  selector: 'address-tile',\n  templateUrl: './address-tile.component.html',\n  styleUrls: ['./address-tile.component.scss'],\n})\nexport class AddressTileComponent {\n  @Input() addressData!: FormGroup;\n  @Output() onEditAddress: EventEmitter<IUserAddress> =\n    new EventEmitter<IUserAddress>();\n\n  address: string = '';\n  city: string = '';\n  zipCode: string = '';\n  state: string = '';\n\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit() {\n    const formValue = this.addressData.getRawValue();\n    this.address = `${formValue['street']}${\n      formValue['complement'].trim() !== ''\n        ? `, ${formValue['complement'].trim()}`\n        : ''\n    } - ${formValue['neighborhood']}`;\n    this.city = formValue['city'];\n    this.zipCode = formValue['zipCode'];\n    this.state = formValue['state'];\n  }\n\n  openAddressDialog() {\n    const dialogRef = this.dialog.open(AddressDialogComponent, {\n      width: '50%',\n      data: this.addressData,\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        const editedAddress: IUserAddress = {\n          city: result.city,\n          postalCode: result.zipCode,\n          state: result.state,\n          address: `${result.street} - ${result.complement} - ${result.neighborhood}`,\n        };\n\n        this.onEditAddress.emit(editedAddress);\n      }\n    });\n  }\n}\n","<div class=\"address-tile-container\">\n  <div class=\"address-data\">\n    <span> {{ address }} </span>\n    <span> CEP {{ zipCode }} </span>\n    <span> {{ city }}, {{ state }} </span>\n  </div>\n  <div class=\"actions\">\n    <button mat-icon-button color=\"primary\" (click)=\"openAddressDialog()\">\n      <mat-icon>edit</mat-icon>\n    </button>\n    <button mat-icon-button color=\"warn\">\n      <mat-icon>delete</mat-icon>\n    </button>\n  </div>\n</div>\n","<h1 mat-dialog-title>\n  {{ id ? \"Edit Product\" : \"New Product\" }}\n</h1>\n<div mat-dialog-content>\n  <form [formGroup]=\"productForm\" role=\"form\">\n    <mat-form-field id=\"title-field\">\n      <mat-label>Title</mat-label>\n      <input\n        cdkFocusInitial\n        type=\"text\"\n        matInput\n        formControlName=\"title\"\n        placeholder=\"Enter the product title\"\n      />\n      <mat-error *ngIf=\"productForm.get('title')!.hasError('required')\">\n        Title is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n\n    <div class=\"row\">\n      <mat-form-field id=\"category-field\">\n        <mat-label>Category</mat-label>\n        <mat-select formControlName=\"category\">\n          <mat-option\n            *ngFor=\"let category of categories\"\n            [value]=\"category | lowercase\"\n          >\n            {{ category }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"productForm.get('category')!.hasError('required')\">\n          Category is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field id=\"brand-field\">\n        <mat-label>Brand</mat-label>\n        <input\n          cdkFocusInitial\n          type=\"text\"\n          matInput\n          formControlName=\"brand\"\n          placeholder=\"Enter the product brand\"\n        />\n        <mat-error *ngIf=\"productForm.get('brand')!.hasError('required')\">\n          Brand is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n    </div>\n\n    <div class=\"row\">\n      <mat-form-field id=\"stock-field\">\n        <mat-label>Stock</mat-label>\n        <input\n          type=\"number\"\n          matInput\n          formControlName=\"stock\"\n          min=\"0\"\n          placeholder=\"Enter the product stock\"\n        />\n        <mat-error *ngIf=\"productForm.get('stock')!.hasError('required')\">\n          Stock is <strong>required</strong>\n        </mat-error>\n        <mat-error *ngIf=\"productForm.get('stock')!.hasError('min')\">\n          Stock can't be negative\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field id=\"price-field\">\n        <mat-label>Price</mat-label>\n        <input\n          type=\"number\"\n          matInput\n          formControlName=\"price\"\n          min=\"0\"\n          placeholder=\"Enter the product price\"\n        />\n        <span matTextPrefix>$&nbsp;</span>\n        <span matTextSuffix>.00</span>\n        <mat-error *ngIf=\"productForm.get('price')!.hasError('required')\">\n          Price is <strong>required</strong>\n        </mat-error>\n        <mat-error *ngIf=\"productForm.get('price')!.hasError('min')\">\n          Price can't be negative\n        </mat-error>\n      </mat-form-field>\n    </div>\n\n    <mat-form-field id=\"description-field\">\n      <mat-label>Description</mat-label>\n      <textarea\n        type=\"text\"\n        matInput\n        formControlName=\"description\"\n        placeholder=\"Enter the product description\"\n        maxlength=\"250\"\n      ></textarea>\n      <mat-error *ngIf=\"productForm.get('description')!.hasError('required')\">\n        Description is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n  </form>\n</div>\n<div mat-dialog-actions align=\"end\">\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\n  <button\n    mat-stroked-button\n    color=\"primary\"\n    (click)=\"apply()\"\n    [disabled]=\"productForm.invalid || !productForm.dirty\"\n  >\n    {{ id ? \"Edit\" : \"Add\" }}\n  </button>\n</div>\n","import { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ProductsService, UtilsService } from 'src/app/core/services';\nimport { IProduct } from 'src/app/shared/models';\n\n@Component({\n  templateUrl: './product-dialog.component.html',\n  styleUrls: ['./product-dialog.component.scss'],\n})\nexport class ProductDialogComponent {\n  productForm!: FormGroup;\n  categories: string[] = [];\n  product?: IProduct;\n\n  constructor(\n    private utils: UtilsService,\n    private productsService: ProductsService,\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<ProductDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public id?: number\n  ) {}\n\n  ngOnInit() {\n    this.productsService\n      .getCategories()\n      .then(\n        (categories) =>\n          (this.categories = categories.map((category) =>\n            this.utils.captalizeFirstLetter(category)\n          ))\n      );\n\n    this.productForm = this.fb.group({\n      title: ['', [Validators.required]],\n      brand: ['', [Validators.required]],\n      category: ['', [Validators.required]],\n      description: ['', [Validators.required, Validators.maxLength(250)]],\n      price: [0, [Validators.required, Validators.min(0)]],\n      stock: [0, [Validators.required, Validators.min(0)]],\n      images: [[]],\n    });\n    this.initProductForm();\n  }\n\n  private async initProductForm(): Promise<any> {\n    if (this.id) {\n      this.product = await this.productsService.getProductById(\n        this.id.toString()\n      );\n\n      const formControls = this.productForm.controls;\n      formControls['title'].setValue(this.product.title);\n      formControls['brand'].setValue(this.product.brand);\n      formControls['category'].setValue(this.product.category);\n      formControls['description'].setValue(this.product.description);\n      formControls['price'].setValue(this.product.price);\n      formControls['stock'].setValue(this.product.stock);\n      formControls['images'].setValue(this.product.images);\n    }\n  }\n\n  private async convertFormValueToProduct(formValue: any): Promise<IProduct> {\n    if (this.product) {\n      return {\n        ...this.product!,\n        title: formValue['title'],\n        brand: formValue['brand'],\n        category: formValue['category'],\n        stock: formValue['stock'],\n        price: formValue['price'],\n        description: formValue['description'],\n      };\n    }\n\n    return {\n      id: (await this.productsService.getProducts()).length + 1,\n      title: formValue['title'],\n      brand: formValue['brand'],\n      category: formValue['category'],\n      stock: formValue['stock'],\n      price: formValue['price'],\n      description: formValue['description'],\n      discountPercentage: 0,\n      images: [],\n      rating: 0,\n      thumbnail: '',\n    };\n  }\n\n  async apply() {\n    const product: IProduct = await this.convertFormValueToProduct(\n      this.productForm.getRawValue()\n    );\n    this.dialogRef.close(product);\n  }\n}\n"],"x_google_ignoreList":[]}