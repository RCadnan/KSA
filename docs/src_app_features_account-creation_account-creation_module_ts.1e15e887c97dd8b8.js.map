{"version":3,"file":"src_app_features_account-creation_account-creation_module_ts.1e15e887c97dd8b8.js","mappings":"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","names":["i0","AccountCreationComponent","constructor","fb","authService","utils","router","alert","spinner","this","ngOnInit","stateOpts","Object","keys","States","map","st","uf","name","newAccountForm","group","Validators","lastName","email","phone","address","zipCode","street","complement","neighborhood","city","state","password","confirmPassword","privacyPolicy","dataSharing","getAddressFromZipCode","trim","_this","controls","get","setErrors","required","replace","getDataFromZipCode","fillAddress","invalidZipCode","agreementAccepted","formValue","getRawValue","addressGroupControl","setValue","cidade","estado","bairro","logradouro","getNewUser","formValues","username","split","addressValue","id","USERS","firstName","maidenName","addresses","postalCode","createAccount","_this2","show","newUser","u","createErrorDialog","hide","differentPassword","valid","createNewAccount","createSuccessDialogWithAction","navigate","core","selectors","ctx","value","routes","path","component","AccountCreationRoutingModule","RouterModule","AccountCreationModule","provideNgxMask","imports","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/features/account-creation/account-creation.component.html","./src/app/features/account-creation/account-creation.component.ts","./src/app/features/account-creation/account-creation-routing.module.ts","./src/app/features/account-creation/account-creation.module.ts"],"sourcesContent":["<form\n  [formGroup]=\"newAccountForm\"\n  class=\"creation-form\"\n  role=\"form\"\n  (ngSubmit)=\"createAccount()\"\n>\n  <div class=\"login-container\">\n    <div class=\"logo\" routerLink=\"/\" title=\"Back to Store\">\n      <img\n        loading=\"lazy\"\n        src=\"assets/images/shopping-cart-logo.png\"\n        width=\"60\"\n        height=\"60\"\n      />\n      <span>BC Store</span>\n    </div>\n\n    <div class=\"fields\">\n      <div class=\"row\">\n        <mat-form-field id=\"name-field\">\n          <mat-label>Name</mat-label>\n          <input\n            type=\"text\"\n            matInput\n            formControlName=\"name\"\n            placeholder=\"Enter your name\"\n          />\n          <mat-error *ngIf=\"newAccountForm.get('name')!.hasError('required')\">\n            Name is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field id=\"lastname-field\">\n          <mat-label>Last Name</mat-label>\n          <input\n            type=\"text\"\n            matInput\n            formControlName=\"lastName\"\n            placeholder=\"Enter your last name\"\n          />\n          <mat-error\n            *ngIf=\"newAccountForm.get('lastName')!.hasError('required')\"\n          >\n            Last name is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <mat-form-field id=\"phone-field\">\n        <mat-label>Phone</mat-label>\n        <span matTextPrefix>+55</span>\n        <input\n          type=\"tel\"\n          matInput\n          formControlName=\"phone\"\n          placeholder=\"Enter your phone\"\n          mask=\"(00) 00000-0000||(00) 0000-0000\"\n        />\n        <mat-error *ngIf=\"newAccountForm.get('phone')!.hasError('required')\">\n          Phone is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field id=\"email-field\">\n        <mat-label>Email</mat-label>\n        <input\n          type=\"email\"\n          matInput\n          formControlName=\"email\"\n          placeholder=\"Enter your email\"\n        />\n        <mat-error\n          *ngIf=\"\n            newAccountForm.get('email')!.hasError('email') &&\n            !newAccountForm.get('email')!.hasError('required')\n          \"\n        >\n          Please enter a valid email address\n        </mat-error>\n        <mat-error *ngIf=\"newAccountForm.get('email')!.hasError('required')\">\n          Email is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <div class=\"address\" formGroupName=\"address\">\n        <h2>Adress</h2>\n\n        <div class=\"row\">\n          <mat-form-field id=\"zipCode-field\">\n            <mat-label>ZIP Code</mat-label>\n            <input\n              type=\"text\"\n              matInput\n              formControlName=\"zipCode\"\n              placeholder=\"Enter your ZIP Code\"\n              mask=\"00000-000\"\n            />\n            <button\n              matSuffix\n              mat-icon-button\n              type=\"button\"\n              (click)=\"\n                getAddressFromZipCode(\n                  newAccountForm.get('address')!.get('zipCode')!.value\n                )\n              \"\n            >\n              <mat-icon> search </mat-icon>\n            </button>\n            <mat-error\n              *ngIf=\"\n                newAccountForm\n                  .get('address')!\n                  .get('zipCode')!\n                  .hasError('required')\n              \"\n            >\n              ZIP Code is <strong>required</strong>\n            </mat-error>\n            <mat-error\n              *ngIf=\"\n                newAccountForm\n                  .get('address')!\n                  .get('zipCode')!\n                  .hasError('invalidZipCode')\n              \"\n            >\n              Please enter a valid ZIP Code\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field id=\"state-field\">\n            <mat-label>State</mat-label>\n            <mat-select formControlName=\"state\">\n              <mat-option *ngFor=\"let opt of stateOpts\" [value]=\"opt.uf\">\n                {{ opt.name }}\n              </mat-option>\n            </mat-select>\n            <mat-error\n              *ngIf=\"\n                newAccountForm\n                  .get('address')!\n                  .get('state')!\n                  .hasError('required')\n              \"\n            >\n              State is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n        </div>\n\n        <div class=\"row\">\n          <mat-form-field id=\"street-field\">\n            <mat-label>Street</mat-label>\n            <input\n              type=\"text\"\n              matInput\n              formControlName=\"street\"\n              placeholder=\"Enter your street\"\n            />\n            <mat-error\n              *ngIf=\"\n                newAccountForm\n                  .get('address')!\n                  .get('street')!\n                  .hasError('required')\n              \"\n            >\n              Street is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field id=\"complement-field\">\n            <mat-label>Complement</mat-label>\n            <input\n              type=\"text\"\n              matInput\n              formControlName=\"complement\"\n              placeholder=\"Enter your complement\"\n            />\n          </mat-form-field>\n        </div>\n\n        <div class=\"row\">\n          <mat-form-field id=\"city-field\">\n            <mat-label>City</mat-label>\n            <input\n              type=\"text\"\n              matInput\n              formControlName=\"city\"\n              placeholder=\"Enter your city\"\n            />\n            <mat-error\n              *ngIf=\"\n                newAccountForm.get('address')!.get('city')!.hasError('required')\n              \"\n            >\n              City name is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field id=\"neighborhood-field\">\n            <mat-label>Neighborhood</mat-label>\n            <input\n              type=\"text\"\n              matInput\n              formControlName=\"neighborhood\"\n              placeholder=\"Enter your neighborhood\"\n            />\n            <mat-error\n              *ngIf=\"\n                newAccountForm\n                  .get('address')!\n                  .get('neighborhood')!\n                  .hasError('required')\n              \"\n            >\n              Neighborhood is <strong>required</strong>\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <mat-form-field id=\"password-field\">\n          <mat-label>Password</mat-label>\n          <input\n            [type]=\"!showPassword[0] ? 'password' : 'text'\"\n            matInput\n            formControlName=\"password\"\n            placeholder=\"Enter your password\"\n          />\n          <button\n            matSuffix\n            mat-icon-button\n            type=\"button\"\n            (click)=\"showPassword[0] = !showPassword[0]\"\n          >\n            <mat-icon>\n              {{ !showPassword[0] ? \"visibility\" : \"visibility_off\" }}\n            </mat-icon>\n          </button>\n          <mat-error\n            *ngIf=\"newAccountForm.get('password')!.hasError('required')\"\n          >\n            Password is <strong>required</strong>\n          </mat-error>\n          <mat-error\n            *ngIf=\"\n              newAccountForm.get('password')!.hasError('incorrectPassword')\n            \"\n          >\n            Password is <strong>incorrect</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field id=\"confirm-password-field\">\n          <mat-label>Confirm Password</mat-label>\n          <input\n            [type]=\"!showPassword[1] ? 'password' : 'text'\"\n            matInput\n            formControlName=\"confirmPassword\"\n            placeholder=\"Confirm your password\"\n          />\n          <button\n            matSuffix\n            mat-icon-button\n            type=\"button\"\n            (click)=\"showPassword[1] = !showPassword[1]\"\n          >\n            <mat-icon>\n              {{ !showPassword[1] ? \"visibility\" : \"visibility_off\" }}\n            </mat-icon>\n          </button>\n          <mat-error\n            *ngIf=\"newAccountForm.get('confirmPassword')!.hasError('required')\"\n          >\n            Password is <strong>required</strong>\n          </mat-error>\n          <mat-error\n            *ngIf=\"\n              newAccountForm\n                .get('confirmPassword')!\n                .hasError('differentPassword')\n            \"\n          >\n            Passwords are <strong>differents</strong>\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div class=\"agreements\">\n        <mat-checkbox formControlName=\"privacyPolicy\" color=\"primary\">\n          Privacy Policy Agreement - <a>Click here</a>\n        </mat-checkbox>\n        <mat-checkbox formControlName=\"dataSharing\" color=\"primary\">\n          I agree with the data sharing policy -\n          <a\n            href=\"https://www.planalto.gov.br/ccivil_03/_ato2015-2018/2018/lei/l13709.htm\"\n            target=\"_blank\"\n          >\n            LGPD document\n          </a>\n        </mat-checkbox>\n      </div>\n    </div>\n\n    <button\n      mat-flat-button\n      color=\"primary\"\n      id=\"submit-btn\"\n      type=\"submit\"\n      [disabled]=\"newAccountForm.invalid || !agreementAccepted()\"\n    >\n      Create Account\n    </button>\n  </div>\n</form>\n","import { Component } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService, AlertService, UtilsService } from 'src/app/core/services';\nimport { LoadingSpinnerService } from 'src/app/core/services/spinner/loading-spinner.service';\nimport { USERS } from 'src/app/shared/constants';\nimport { States } from 'src/app/shared/constants/states.constants';\nimport { IPostmonApiResponse, IState, IUser } from 'src/app/shared/models';\n\n@Component({\n  templateUrl: './account-creation.component.html',\n  styleUrls: ['./account-creation.component.scss'],\n})\nexport class AccountCreationComponent {\n  newAccountForm!: FormGroup;\n  showPassword: boolean[] = [false, false];\n  stateOpts: IState[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private utils: UtilsService,\n    private router: Router,\n    private alert: AlertService,\n    private spinner: LoadingSpinnerService\n  ) {}\n\n  ngOnInit() {\n    this.stateOpts = Object.keys(States).map((st) => ({\n      uf: st,\n      name: States[st].name,\n    }));\n\n    this.newAccountForm = this.fb.group({\n      name: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.required]],\n      address: this.fb.group({\n        zipCode: ['', [Validators.required]],\n        street: ['', [Validators.required]],\n        complement: [''],\n        neighborhood: ['', [Validators.required]],\n        city: ['', [Validators.required]],\n        state: ['', [Validators.required]],\n      }),\n      password: ['', [Validators.required]],\n      confirmPassword: ['', [Validators.required]],\n      privacyPolicy: [false, [Validators.required]],\n      dataSharing: [false, [Validators.required]],\n    });\n  }\n\n  async getAddressFromZipCode(zipCode: string) {\n    if (zipCode.trim() === '') {\n      this.newAccountForm.controls['address'].get('zipCode')?.setErrors({\n        required: true,\n      });\n    }\n\n    try {\n      zipCode = zipCode.replace('-', '').trim();\n      const address: IPostmonApiResponse = await this.utils.getDataFromZipCode(\n        zipCode\n      );\n      this.fillAddress(address);\n    } catch (err) {\n      this.newAccountForm.controls['address'].get('zipCode')?.setErrors({\n        invalidZipCode: true,\n      });\n    }\n  }\n\n  agreementAccepted() {\n    const formValue = this.newAccountForm.getRawValue();\n    const privacyPolicy: boolean = formValue['privacyPolicy'];\n    const dataSharing: boolean = formValue['dataSharing'];\n\n    return privacyPolicy && dataSharing;\n  }\n\n  private fillAddress(address: IPostmonApiResponse) {\n    const addressGroupControl = this.newAccountForm.controls['address'];\n\n    addressGroupControl.get('city')?.setValue(address.cidade);\n    addressGroupControl.get('state')?.setValue(address.estado);\n    addressGroupControl.get('neighborhood')?.setValue(address.bairro);\n    addressGroupControl.get('street')?.setValue(address.logradouro);\n  }\n\n  private getNewUser(): IUser {\n    const formValues = this.newAccountForm.getRawValue();\n    const email = formValues['email'];\n    const username = email.split('@')[0];\n    const password = formValues['password'];\n    const name = formValues['name'];\n    const lastName = formValues['lastName'];\n    const phone = formValues['phone'];\n\n    const addressValue = this.newAccountForm.controls['address'].getRawValue();\n    const zipCode = addressValue['zipCode'];\n    const street = addressValue['street'];\n    const complement = addressValue['complement'];\n    const neighborhood = addressValue['neighborhood'];\n    const city = addressValue['city'];\n    const state = addressValue['state'];\n\n    return {\n      id: USERS.length + 1,\n      email,\n      firstName: name,\n      maidenName: '',\n      lastName,\n      password,\n      username,\n      addresses: [\n        {\n          city,\n          postalCode: zipCode,\n          state,\n          address: `${street} - ${complement} - ${neighborhood}`,\n        },\n      ],\n      phone,\n    };\n  }\n\n  async createAccount() {\n    this.spinner.show();\n\n    const newUser: IUser = this.getNewUser();\n\n    const user = USERS.find(\n      (u) => u.email === newUser.email || u.username === newUser.username\n    );\n\n    if (user) {\n      this.alert.createErrorDialog(\n        'Account already exists',\n        'An account with this email already exists'\n      );\n      this.spinner.hide();\n      return;\n    }\n\n    const confirmPassword =\n      this.newAccountForm.getRawValue()['confirmPassword'];\n\n    if (newUser.password !== confirmPassword) {\n      this.newAccountForm.controls['confirmPassword'].setErrors({\n        differentPassword: true,\n      });\n      this.spinner.hide();\n      return;\n    }\n\n    try {\n      if (this.newAccountForm.valid) {\n        await this.authService.createNewAccount(newUser);\n        this.alert.createSuccessDialogWithAction(\n          'Account created!',\n          'Your account was created successfully',\n          () => {\n            this.router.navigate(['/login']);\n          }\n        );\n      }\n    } catch (err) {\n      this.alert.createErrorDialog('Error!', 'Something went wrong');\n    } finally {\n      this.spinner.hide();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AccountCreationComponent } from './account-creation.component';\n\nconst routes: Routes = [{ path: '', component: AccountCreationComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AccountCreationRoutingModule {}\n","import { NgModule } from '@angular/core';\n\nimport { AccountCreationRoutingModule } from './account-creation-routing.module';\nimport { AccountCreationComponent } from './account-creation.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { NgxMaskDirective, NgxMaskPipe, provideNgxMask } from 'ngx-mask';\n\n@NgModule({\n  declarations: [AccountCreationComponent],\n  imports: [\n    SharedModule,\n    AccountCreationRoutingModule,\n    NgxMaskDirective,\n    NgxMaskPipe,\n  ],\n  providers: [provideNgxMask()],\n})\nexport class AccountCreationModule {}\n"],"x_google_ignoreList":[]}