{"version":3,"file":"src_app_features_account_pages_user-area_user-area_module_ts.fa69154955f35696.js","mappings":"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","names":["i0","UserAreaComponent","constructor","dialog","fb","authService","spinner","this","ngOnInit","user","getUser","userInterface","addresses","personalInfoForm","group","name","firstName","Validators","lastName","email","phone","newsLetter","addressesForm","array","forEach","address","addressesData","push","setAddress","controls","splittedAddress","split","street","complement","neighborhood","length","zipCode","postalCode","trim","city","state","updateUserInfo","show","formValue","getRawValue","updateUserData","markAsPristine","hide","updateAddresses","onEditAddress","editedAddress","index","addNewAddress","open","AddressDialogComponent","width","afterClosed","subscribe","result","newAddress","core","selectors","ctx","routes","path","component","UserAreaRoutingModule","RouterModule","UserAreaModule","provideNgxMask","imports","SharedModule","AccountModule"],"sourceRoot":"webpack:///","sources":["./src/app/features/account/pages/user-area/user-area.component.html","./src/app/features/account/pages/user-area/user-area.component.ts","./src/app/features/account/pages/user-area/user-area-routing.module.ts","./src/app/features/account/pages/user-area/user-area.module.ts"],"sourcesContent":["<div class=\"user-container\">\n  <form\n    [formGroup]=\"personalInfoForm\"\n    role=\"form\"\n    (ngSubmit)=\"updateUserInfo()\"\n  >\n    <div class=\"user-data-container mat-elevation-z5\">\n      <h1>Personal Information</h1>\n\n      <div class=\"row\">\n        <mat-form-field id=\"name-field\">\n          <mat-label>Name</mat-label>\n          <input\n            type=\"text\"\n            matInput\n            formControlName=\"name\"\n            placeholder=\"Enter your name\"\n          />\n          <mat-error *ngIf=\"personalInfoForm.get('name')!.hasError('required')\">\n            Name is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field id=\"lastname-field\">\n          <mat-label>Last Name</mat-label>\n          <input\n            type=\"text\"\n            matInput\n            formControlName=\"lastName\"\n            placeholder=\"Enter your last name\"\n          />\n          <mat-error\n            *ngIf=\"personalInfoForm.get('lastName')!.hasError('required')\"\n          >\n            Last name is <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <mat-form-field id=\"email-field\">\n        <mat-label>Email</mat-label>\n        <input\n          type=\"email\"\n          matInput\n          formControlName=\"email\"\n          placeholder=\"Enter your email\"\n        />\n        <mat-error\n          *ngIf=\"\n            personalInfoForm.get('email')!.hasError('email') &&\n            !personalInfoForm.get('email')!.hasError('required')\n          \"\n        >\n          Please enter a valid email address\n        </mat-error>\n        <mat-error *ngIf=\"personalInfoForm.get('email')!.hasError('required')\">\n          Email is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field id=\"phone-field\">\n        <mat-label>Phone</mat-label>\n        <span matTextPrefix>+55</span>\n        <input\n          type=\"tel\"\n          matInput\n          formControlName=\"phone\"\n          placeholder=\"Enter your phone\"\n          mask=\"(00) 00000-0000||(00) 0000-0000\"\n        />\n        <mat-error *ngIf=\"personalInfoForm.get('phone')!.hasError('required')\">\n          Phone is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-checkbox formControlName=\"newsLetter\" color=\"primary\">\n        I want to receive a newsletter into my email\n      </mat-checkbox>\n\n      <div class=\"submit-button\">\n        <button\n          mat-flat-button\n          color=\"primary\"\n          type=\"submit\"\n          [disabled]=\"personalInfoForm.invalid || !personalInfoForm.dirty\"\n        >\n          Update my info\n        </button>\n      </div>\n    </div>\n  </form>\n\n  <form [formGroup]=\"addressesForm\" role=\"form\">\n    <div class=\"user-addresses mat-elevation-z5\">\n      <div class=\"title\">\n        <h1>Addresses</h1>\n        <button mat-mini-fab color=\"primary\" (click)=\"addNewAddress()\">\n          <mat-icon>add</mat-icon>\n        </button>\n      </div>\n      <div class=\"address-list\">\n        <address-tile\n          *ngFor=\"let address of addressesData.controls; let i = index\"\n          [addressData]=\"address\"\n          (onEditAddress)=\"onEditAddress($event, i)\"\n        ></address-tile>\n      </div>\n    </div>\n  </form>\n</div>\n","import { Component } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AuthService } from 'src/app/core/services';\nimport { LoadingSpinnerService } from 'src/app/core/services/spinner/loading-spinner.service';\nimport { IUser, IUserAddress } from 'src/app/shared/models';\nimport { AddressDialogComponent } from '../../components/address-dialog/address-dialog.component';\n\n@Component({\n  templateUrl: './user-area.component.html',\n  styleUrls: ['./user-area.component.scss'],\n})\nexport class UserAreaComponent {\n  personalInfoForm!: FormGroup;\n  addressesForm!: FormGroup;\n  user!: IUser;\n  addresses: IUserAddress[] = [];\n\n  constructor(\n    private dialog: MatDialog,\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private spinner: LoadingSpinnerService\n  ) {}\n\n  ngOnInit() {\n    this.user = this.authService.getUser()!.userInterface;\n    this.addresses = this.authService.getUser()!.addresses;\n\n    this.personalInfoForm = this.fb.group({\n      name: [this.user.firstName, [Validators.required]],\n      lastName: [this.user.lastName, [Validators.required]],\n      email: [this.user.email, [Validators.required, Validators.email]],\n      phone: [this.user.phone, [Validators.required]],\n      newsLetter: [false],\n    });\n\n    this.addressesForm = this.fb.group({\n      addresses: this.fb.array([]),\n    });\n\n    (this.addresses ?? []).forEach((address) => {\n      this.addressesData.push(this.setAddress(address));\n    });\n  }\n\n  get addressesData() {\n    return <FormArray<FormGroup>>this.addressesForm.controls['addresses'];\n  }\n\n  setAddress(address: IUserAddress): FormGroup {\n    const splittedAddress: string[] = address.address.split(' - ');\n    const street: string = splittedAddress[0];\n    const complement: string = splittedAddress[1] ?? '';\n    const neighborhood: string =\n      splittedAddress[splittedAddress.length - 1] ?? '';\n\n    return this.fb.group({\n      zipCode: [address.postalCode.trim(), [Validators.required]],\n      street: [street.trim(), [Validators.required]],\n      complement: [complement.trim()],\n      neighborhood: [neighborhood.trim(), [Validators.required]],\n      city: [address.city.trim(), [Validators.required]],\n      state: [address.state.trim(), [Validators.required]],\n    });\n  }\n\n  updateUserInfo() {\n    this.spinner.show();\n    const formValue = this.personalInfoForm.getRawValue();\n    const user: IUser = {\n      ...this.user,\n      firstName: formValue['name'],\n      lastName: formValue['lastName'],\n      email: formValue['email'],\n      phone: formValue['phone'],\n    };\n    this.authService.updateUserData(user);\n    this.personalInfoForm.markAsPristine();\n    this.spinner.hide();\n  }\n\n  updateAddresses() {\n    this.authService.updateAddresses(this.addresses);\n  }\n\n  onEditAddress(editedAddress: IUserAddress, index: number) {\n    this.addressesData.controls[index] = this.setAddress(editedAddress);\n    this.addresses.push(editedAddress);\n    this.updateAddresses();\n  }\n\n  addNewAddress() {\n    const dialogRef = this.dialog.open(AddressDialogComponent, {\n      width: '50%',\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        const newAddress: IUserAddress = {\n          city: result.city,\n          postalCode: result.zipCode,\n          state: result.state,\n          address: `${result.street} - ${result.complement} - ${result.neighborhood}`,\n        };\n        this.addressesData.controls.push(this.setAddress(newAddress));\n        this.addresses.push(newAddress);\n        this.updateAddresses();\n      }\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { UserAreaComponent } from './user-area.component';\n\nconst routes: Routes = [{ path: '', component: UserAreaComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class UserAreaRoutingModule {}\n","import { NgModule } from '@angular/core';\n\nimport { UserAreaRoutingModule } from './user-area-routing.module';\nimport { UserAreaComponent } from './user-area.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { NgxMaskDirective, NgxMaskPipe, provideNgxMask } from 'ngx-mask';\nimport { AccountModule } from '../../account.module';\n\n@NgModule({\n  declarations: [UserAreaComponent],\n  imports: [\n    SharedModule,\n    UserAreaRoutingModule,\n    AccountModule,\n  ],\n  providers: [provideNgxMask()],\n})\nexport class UserAreaModule {}\n"],"x_google_ignoreList":[]}